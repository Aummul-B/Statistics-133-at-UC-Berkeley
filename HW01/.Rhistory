read_csv("abalone.data", col_types = column_types, col_names = coulumn_names)
library("readr")
read_delim("abalone.data", delim = ",")
read_csv("abalone.data", col_types = column_types, col_names = coulumn_names)
library("readr")
read_delim("abalone.data", delim = ",")
read_csv("abalone.data",  col_names = coulumn_names)
read_csv("abalone.data", col_types = column_types, col_names = coulumn_names)
column_types
library("readr")
read_delim("abalone.data", delim = ",")
read_csv("abalone.data", col_types = "column_types", col_names = coulumn_names)
library("readr")
read_delim("abalone.data", delim = ",")
read_csv("abalone.data", col_types = list(sex = col_factor(), length = col_double(), ), col_names = coulumn_names)
library("readr")
read_delim("abalone.data", delim = ",")
read_csv("abalone.data", col_types = list(sex = col_factor(M, F, I), length = col_double(), ), col_names = coulumn_names)
read_csv("abalone.data", col_types = "cdddddddi", col_names = coulumn_names)
column_types <- c(
'character',
'double',
'double',
'double',
'double',
'double',
'double',
'double',
'double'
)
library("readr")
read_delim("abalone.data", delim = ",")
read_csv("abalone.data", col_types = column_types, col_names = coulumn_names)
column_types <- list(
'character',
'double',
'double',
'double',
'double',
'double',
'double',
'double',
'double'
)
column_types <- list(
'character',
'double',
'double',
'double',
'double',
'double',
'double',
'double',
'integer'
)
read_csv("abalone.data", col_types = column_types, col_names = coulumn_names)
column_types <- c(
'character',
'double',
'double',
'double',
'double',
'double',
'double',
'double',
'integer'
)
read_csv("abalone.data", col_types = column_types, col_names = coulumn_names)
library("readr")
read_delim("abalone.data", delim = ",")
read_csv("abalone.data",  col_names = coulumn_names)
?read_csv
read_csv("abalone.data",  col_names = coulumn_names, col_types = column_types)
read_csv("abalone.data",  col_names = coulumn_names, col_types = column_types)
column_types
coulumn_names
?cols
library("readr")
read_delim("abalone.data", delim = ",")
read_csv("abalone.data",  col_names = coulumn_names, col_types = "cddddddddi")
library("readr")
read_delim("abalone.data", delim = ",")
read_csv("abalone.data",  col_names = coulumn_names, col_types = "cdddddddi")
is.na("abalone$sex)
is.na(\abalone$sex)
is.na(abalone$sex)
is.na(abalone)
dataDir<-"../finalDataSets"
# dataDir<-"."
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
setwd("C:/Users/Aummul/Downloads")
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
college <- read.csv("C:/Users/Aummul/Downloads/college.csv", header=FALSE)
View(college)
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
scorecard<-scorecard[-which(scorecard$CONTROL==3),]
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
dataDir<-"../finalDataSets"
# dataDir<-"\Downloads"
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
dataDir<-"../finalDataSets"
# dataDir<-"/Downloads"
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
setwd("C:/Users/Aummul/Downloads")
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
dataDir<-"../finalDataSets"
# dataDir<-"/Downloads"
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
dataDir<-"../finalDataSets"
# dataDir<-"/Downloads"
dataDir<-"../finalDataSets"
# dataDir<-"."
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
dataDir<-"../finalDataSets"
# dataDir<-"."
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
dataDir<-"../finalDataSets"
dataDir<-"."
scorecard <- read.csv(file.path(dataDir,"college.csv"), stringsAsFactors = FALSE)
scorecard<-scorecard[-which(scorecard$CONTROL==3),]
plot(scorecard[,c("TUITIONFEE_OUT","RET_FT4")])
scorecard[scorecard[,"RET_FT4"]==0,]
scorecard<-scorecard[-which(scorecard[,"RET_FT4"]==0),]
plot(scorecard[,c("TUITIONFEE_OUT","RET_FT4")])
plot(private[,c("TUITIONFEE_OUT","RET_FT4")],col="black")
private<-subset(scorecard,CONTROL==2)
# equivalent to
# private<-scorecard[scorecard[,"CONTROL"]==2,]
public<-subset(scorecard,CONTROL==1)
# equivalent to
# public<-scorecard[scorecard[,"CONTROL"]==1,]
set.seed(3523)
examplePoints<-sample(1:nrow(private),4)
segToLine<-function(points,beta0,beta1){
yhat<-beta0+beta1*points[,1]
segments(x0=points[,1],y0=points[,2],y1=yhat,col="red",lwd=2)
points(points,col="red",pch=19)
}
par(mfrow=c(1,2))
plot(private[,c("TUITIONFEE_OUT","RET_FT4")],col="black",main="No slope")
abline(h=m[2],col="red")
private<-subset(scorecard,CONTROL==2)
# equivalent to
# private<-scorecard[scorecard[,"CONTROL"]==2,]
public<-subset(scorecard,CONTROL==1)
# equivalent to
# public<-scorecard[scorecard[,"CONTROL"]==1,]
plot(private[,c("TUITIONFEE_OUT","RET_FT4")],col="black")
m<-colMeans(private[,c("TUITIONFEE_OUT","RET_FT4")])
abline(h=m[2],col="red")
abline(a=.4,b=(m[2]-.4)/m[1],col="red")
abline(a=.9,b=(m[2]-.9)/m[1],col="red")
points(m[1],m[2],pch=19,cex=2)
set.seed(3523)
examplePoints<-sample(1:nrow(private),4)
segToLine<-function(points,beta0,beta1){
yhat<-beta0+beta1*points[,1]
segments(x0=points[,1],y0=points[,2],y1=yhat,col="red",lwd=2)
points(points,col="red",pch=19)
}
par(mfrow=c(1,2))
plot(private[,c("TUITIONFEE_OUT","RET_FT4")],col="black",main="No slope")
abline(h=m[2],col="red")
segToLine(private[examplePoints,c("TUITIONFEE_OUT","RET_FT4")],beta0=m[2],beta1=0)
plot(private[,c("TUITIONFEE_OUT","RET_FT4")],col="black",main="No slope")
abline(a=.65,b=(m[2]-.65)/m[1],col="red")
segToLine(private[examplePoints,c("TUITIONFEE_OUT","RET_FT4")],beta0=.65,beta1=(m[2]-.65)/m[1])
set.seed(3523)
examplePoints<-sample(1:nrow(private),4)
segToLine<-function(points,beta0,beta1){
yhat<-beta0+beta1*points[,1]
segments(x0=points[,1],y0=points[,2],y1=yhat,col="red",lwd=2)
points(points,col="red",pch=19)
}
par(mfrow=c(1,2))
plot(private[,c("TUITIONFEE_OUT","RET_FT4")],col="black",main="No slope")
abline(h=m[2],col="red")
segToLine(private[examplePoints,c("TUITIONFEE_OUT","RET_FT4")],beta0=m[2],beta1=0)
plot(private[,c("TUITIONFEE_OUT","RET_FT4")],col="black",main="No slope")
abline(a=.65,b=(m[2]-.65)/m[1],col="red")
segToLine(private[examplePoints,c("TUITIONFEE_OUT","RET_FT4")],beta0=.65,beta1=(m[2]-.65)/m[1])
knitr::opts_chunk$set(echo = TRUE)
# Read in data.
marvel <- read.csv("marvel-wikia-data.csv")
knitr::opts_chunk$set(echo = TRUE)
# Read in data.
marvel <- read.csv("marvel-wikia-data.csv")
female.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Female Characters"])
male.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Male Characters"])
# Insert your code here for calculating the CI, and save the CIs as
# `log.female.ci` and `log.male.ci`
log.female.ci <- t.test(female.logappearances)$conf.int
log.male.ci <- t.test(male.logappearances)$conf.int
# Insert your code here for calculating the CI, and save the CIs as
# `log.female.ci` and `log.male.ci`
log.female.ci <- t.test(female.logappearances)$conf.int
log.male.ci <- t.test(male.logappearances)$conf.int
log.female.ci
log.male.ci
knitr::opts_chunk$set(echo = TRUE)
# Read in data.
marvel <- read.csv("marvel-wikia-data.csv")
female.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Female Characters"])
male.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Male Characters"])
female.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Female Characters"])
male.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Male Characters"])
knitr::opts_chunk$set(echo = TRUE)
# Read in data.
marvel <- read.csv("marvel-wikia-data.csv")
female.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Female Characters"])
male.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Male Characters"])
t.test(female.logappearances)
t.test
?t.test
names(t.test())
female.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Female Characters"])
male.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Male Characters"])
female.logappearances
male.logappearances
female.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Female Characters"])
male.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Male Characters"])
female.logappearances
male.logappearances
View(marvel)
female.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Female Characters"])
male.logappearances <- log(marvel$APPEARANCES[marvel$SEX == "Male Characters"])
# Insert your code here for calculating the CI, and save the CIs as
# `log.female.ci` and `log.male.ci`
log.female.ci <- t.test(female.logappearances)$conf.int
log.male.ci <- t.test(male.logappearances)$conf.int
# Insert your code here for calculating the CI, and save the CIs as
# `log.female.ci` and `log.male.ci`
log.female.ci <- t.test(female.logappearances)$conf.int
log.male.ci <- t.test(male.logappearances)$conf.int
log.female.ci
log.male.ci
attributes(log.male.ci)
attr(log.male.ci, "conf.level"
q
attr(log.male.ci, "conf.level")
# Insert your code here for calculating the CI, and save the CI as
# `log.diff.ci`
log.diff.ci <- t.test(female.logappearances, male.logappearances)$conf.int
log.diff.ci
# Insert your code here for calculating the observed t statistic
# `obs.t`
obs.t <- t.test(female.logappearances, male.logappearances)$statistic
obs.t
# Complete the function for calculating the bootstraped the t-statistic
bootOnce <- function() {
boot.male <- sample(male.logappearances, size = length(male.logappearances), replace = TRUE)
boot.female <- sample(female.logappearances, size = length(female.logappearances), replace = TRUE)
t.stat <- t.test(boot.female, boot.male)$statistic
return(t.stat)
}
test <- bootOnce()
test  # This should give you a numeric value, which is a bootstrapped statstic
replicate
# Insert your code here and save the bootstrapped t statistic as
# `boot.t`
boot.t <- replicate(1000, bootOnce())
# Insert your code for histogram here
hist(boot.t)
# Insert your code for histogram here
hist(boot.t, xlab = "bootstrapped statistics")
# Insert your code for histogram here
hist(boot.t)
# Insert your code and save your bootstrapped CI as
# `boot.ci`
boot.ci <- t.test(boot.t)$statistic
# Insert your code and save your bootstrapped CI as
# `boot.ci`
boot.ci <- t.test(boot.t)$statistic
boot.ci
# Insert your code and save your bootstrapped CI as
# `boot.ci`
boot.ci <- quantile(boot.t, probs = c(0.025, 0.975))
boot.ci
# Insert your code and save your bootstrapped CI as
# `boot.ci`
boot.ci <- quantile(boot.t, probs = c(0.025, 0.975))
boot.ci
# Make some data
# X increases (noisily)
# Y is constructed so it is inversely related to xvar
set.seed(955)
xvar <- 1:20 + rnorm(20,sd=3)
yvar <- -2 * xvar + 3 + rnorm(20,sd=4)
# Make a data frame with the variables
dat <- data.frame(x=xvar, y=yvar)
# Show first few rows
head(dat)
# These two commands is equivalent
fit <- lm(y ~ x, data=dat)
fit <- lm(dat$y ~ dat$x)
summary(fit)
lm
summary(lm)
?summary.lm
fit$coefficients
fit$coefficients[1]
fit$coefficients[2]
data_science <- read.csv("data_science.csv")
# convert string to date object
data_science$week <- as.Date(data_science$week, "%Y-%m-%d")
# create a numeric column representing the time
data_science$time <- as.numeric(data_science$week)
data_science$time <- data_science$time - data_science$time[1] + 1
data_science <- read.csv("data_science.csv")
# convert string to date object
data_science$week <- as.Date(data_science$week, "%Y-%m-%d")
# create a numeric column representing the time
data_science$time <- as.numeric(data_science$week)
data_science$time <- data_science$time - data_science$time[1] + 1
# Insert your code here and save the estimated slope as
# `r.slope`
r.slope <- lm(data_science$r, data_science$time)$coefficient
names(lm)
# Insert your code here and save the estimated slope as
# `r.slope`
r.slope <- lm(data_science$r, data_science$time)$coefficients
# Insert your code here and save the estimated slope as
# `r.slope`
r.slope <- lm(data_science$r, data_science$time)
# Insert your code here and save the estimated slope as
# `r.slope`
r.slope <- lm(data_science$r, data_science$time)
# Insert your code here and save the estimated slope as
# `r.slope`
r.slope <- lm(data_science$r, data_science$time)
# Insert your code here and save the estimated slope as
# `r.slope`
r.slope <- lm(data_science$r, data_science$time)
# Insert your code here and save the estimated slope as
# `r.slope`
r.slope <- lm(data_science$r ~ data_science$time)
r.slope$coefficients[2]
# Insert your code here and save the estimated slope as
# `r.slope`
fit <- lm(r ~ time, data = data_science)
r.slope <- fit$coefficients[2]
r.slope
View(data_science)
?sample
bootOnce <- function() {
boot.male <- sample(male.logappearances, size = length(male.logappearances), replace = TRUE)
boot.female <- sample(female.logappearances, size = length(female.logappearances), replace = TRUE)
t.stat <- t.test(boot.female, boot.male)$statistic
return(t.stat)
}
1:3
sample(1:nrow(data_science))
# Complete the function for calculating the bootstraped slope estimate
bootOnce <- function() {
boot.sample.indices <- sample(1:nrow(data_science), size = nrow(data_science), replace = TRUE)
# # use `boot.sample.indices` to select corresponding rows from `data_science`
boot.sample <- data_science[boot.sample.indices,]
# # calculate bootstrapped slop using data frame `boot.sample`
boot.stat <- lm(r~time, data = boot.sample)$coefficients[2]
# return(boot.stat)
}
# Complete the function for calculating the bootstraped slope estimate
bootOnce <- function() {
boot.sample.indices <- sample(1:nrow(data_science), size = nrow(data_science), replace = TRUE)
# # use `boot.sample.indices` to select corresponding rows from `data_science`
boot.sample <- data_science[boot.sample.indices,]
# # calculate bootstrapped slop using data frame `boot.sample`
boot.stat <- lm(r~time, data = boot.sample)$coefficients[2]
# return(boot.stat)
}
# Insert your code here and save the bootstrapped t statistic as
# `boot.slope`
boot.slope <- replicate(1000, bootOnce())
# Insert your code here and save the bootstrapped t statistic as
# `boot.slope`
boot.slope <- replicate(1000, bootOnce())
boot.slope
# Insert your code here and save the bootstrapped t statistic as
# `boot.slope`
boot.slope <- replicate(1000, bootOnce())
# Insert your code here and save the bootstrapped t statistic as
# `boot.slope`
boot.slope <- replicate(1000, bootOnce())
# Insert your code and save your bootstrapped CI as
# `boot.slope.ci`
boot.slope.ci <- t.test(boot.slope)$conf.int
boot.slope.ci
# Insert your code and save your bootstrapped CI as
# `boot.slope.ci`
boot.slope.ci <- quantile(boot.slope, probs = c(0.025, 0.975))
boot.slope.ci
# Insert your code and save your bootstrapped CI as
# `boot.slope.ci`
boot.slope.ci <- quantile(boot.slope, probs = c(0.05, 0.95))
boot.slope.ci
# Insert your code and save your bootstrapped CI as
# `boot.slope.ci`
boot.slope.ci <- quantile(boot.slope, probs = c(0.05, 0.95))
boot.slope.ci
# Insert your code and save your bootstrapped CI as
# `boot.slope.ci`
boot.slope.ci <- quantile(boot.slope, probs = c(0.05, 0.95))
boot.slope.ci
# Insert your code and save your bootstrapped CI as
# `boot.slope.ci`
boot.slope.ci <- quantile(boot.slope, probs = (0.05, 0.95))
# Insert your code and save your bootstrapped CI as
# `boot.slope.ci`
boot.slope.ci <- quantile(boot.slope, probs = c(0.05, 0.95))
boot.slope.ci
knitr::opts_chunk$set(echo = TRUE)
aggregate(cbind(salary, salary, salary)~(team+Position), data = dat, FUN = mean)
url <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data'
download.file(url = url, destfile = "imports-85.data")
typeof(read.csv())
typeof(read.csv)
class(read.csv)
typeof(read_csv)
?read.csv
read.csv("imports-85.data", header = TRUE, sep = ",")
pwd
dir
dirname(/desktop/133/HW/)
read.csv("imports-85.data", header = TRUE, sep = ",")
getwd()
setwd(dir)
setwd("C:/Users/Aummul/Desktop/133/HW/HW01")
read.csv("imports-85.data", header = TRUE, sep = ",")
setwd("C:/Users/Aummul/Desktop/133/HW/HW01")
read.csv("imports-85.data", header = TRUE, sep = ",")
read.csv("imports-85.data", header = TRUE, sep = ",")
setwd("C:/Users/Aummul/Desktop/133/HW/HW01")
read.csv("imports-85.data", header = TRUE, sep = ",")
imports.85 <- read.csv("C:/Users/Aummul/Desktop/133/HW/HW01/imports-85.data", header=FALSE)
View(imports.85)
setwd("C:/Users/Aummul/Desktop/133/HW/HW01")
dat <- read.csv("imports-85.data", header = TRUE, sep = ",")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:/Users/Aummul/Desktop/133/HW/HW01")
knitr::opts_chunk$set(echo = TRUE)
root.dir = "C:/Users/Aummul/Desktop/133/HW/HW01")
knitr::opts_chunk$set(echo = TRUE)
root.dir = "C:/Users/Aummul/Desktop/133/HW/HW01"
dat <- read.csv("imports-85.data", header = TRUE, sep = ",")
knitr::opts_chunk$set(echo = TRUE)
root.dir = "C:/Users/Aummul/Desktop/133/HW/HW01"
dat <- read.csv("imports-85.data", header = TRUE, sep = ",")
knitr::opts_chunk$set(echo = TRUE)
root.dir = "C:/Users/Aummul/Desktop/133/HW/HW01"
knitr::opts_chunk$set(echo = TRUE)
root.dir = "C:/Users/Aummul/Desktop/133/HW/HW01"
knitr::opts_chunk$set(echo = TRUE)
root.dir = "C:/Users/Aummul/Desktop/133/HW/HW01"
knitr::opts_chunk$set(echo = TRUE)
root.dir = "C:/Users/Aummul/Desktop/133/HW/HW01"
knitr::opts_chunk$set(echo = TRUE)
dat <- root.dir = "C:/Users/Aummul/Desktop/133/HW/HW01"
?root.dir
??root.dir
knitr::opts_chunk$set(echo = TRUE)
opts_knit$(root.dir = "C:/Users/Aummul/Desktop/133/HW/HW01")
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "C:/Users/Aummul/Desktop/133/HW/HW01")
dat <- read.csv(url, header = TRUE, sep = ",")
dat <- read.csv(url, header = TRUE, sep = ",")
autodata <- read.csv(url, header = TRUE, sep = ",")
?read.csv
?read.csv
install.packages(readr)
install.packages("readr")
library(readr)
View(autodata)
knitr::opts_chunk$set(echo = TRUE)
url <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data'
column_names <- c(
"symboling",
"normalized_losses",
"make",
"fuel_type",
"aspiration",
"num_of_doors",
"body_style",
"drive_wheels",
"engine_location",
"wheel_base",
"length",
"width",
"height",
"curb_weight",
"engine_type",
"num_of_cylinders",
"engine_size",
"fuel_system",
"bore",
"stroke",
"compression_ratio",
"horsepower",
"peak_rpm",
"city_mpg",
"highway_mpg",
"price"
)
automobile <- read_csv(url, col_names = column_names)
View(automobile)
View(autodata)
View(dat)
View(imports.85)
View(automobile)

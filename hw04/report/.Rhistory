knitr::opts_chunk$set(echo = TRUE)
set.seed("20170413")
wine.dataset <- read.csv("winequality-red.csv", sep = ";")
test.samples <- sample(1:nrow(wine.dataset), 400)
wine <- wine.dataset[-test.samples, ]
wine.test <- wine.dataset[test.samples, ]
cor(wine[, -1])
wine.fit <- lm(quality ~. ,data = na.omit(wine))
summary(wine.fit)
insert your code here and save your fit as `submodel.fit`
insert your code here and save your fit as `submodel.fit`
insert your code here and save your fit as `submodel.fit`
#insert your code here and save your fit as `submodel.fit`
submodel.fit <- lm(formula = quality~ fixed.acidity + citric.acid + residual.sugar + density, data = na.omit(wine))
summary(submodel.fit)
# insert your code here.
# save the degree of freedom of your full model as `df.fullmodel`.
# save the degree of freedom of your submodel as `df.submodel`.
df.fullmodel <- 1199 - 11 - 1
# df.fullmodel
df.submodel <- 1199 - 4 - 1
# df.submodel
# insert your code here.
# save the RSS of your full model as `rss.fullmodel`.
# save the RSS of your submodel as `rss.submodel`.
rss.fullmodel <- sum((wine.fit$residuals)^2)
rss.fullmodel
rss.submodel <- sum((submodel.fit$residuals)^2)
rss.submodel
# insert your code here and save the F-statistics as `f.stat`
f.stat <- ((rss.submodel - rss.fullmodel)*(df.fullmodel))/(rss.fullmodel * (df.submodel-df.submodel ))
# f.stat
# insert your code here and save the F-statistics as `f.stat`
f.stat <- ((rss.submodel - rss.fullmodel)*(df.fullmodel))/(rss.fullmodel * (df.submodel-df.submodel ))
f.stat
# insert your code here and save the F-statistics as `f.stat`
f.stat <- ((rss.submodel - rss.fullmodel)*(df.fullmodel))/(rss.fullmodel * (df.submodel-df.fullmodel ))
f.stat
# insert your code here and save the p-value as `p.value`
p.value <- 1 - pf(f.stat, df.fullmodel, df.submodel)
p.value
# insert your code here and save the p-value as `p.value`
p.value <- 1 - pf(f.stat, df.submodel, df.fullmodel)
p.value
# insert your code here
anova(submodel.fit, wine.fit)
# Insert your code here to calculate the confidence intervals for the regression coefficients.
confint(submodel.fit)
# insert your code here and save your confidence intervals as `wine.confint`
submodel.fit <- lm(formula = quality~ fixed.acidity + citric.acid + residual.sugar + density, data = na.omit(wine.test))
wine.confint <- confint(submodel.fit)
# insert your code here and save your confidence intervals as `wine.confint`
submodel.fit <- lm(formula = quality~ fixed.acidity + citric.acid + residual.sugar + density, data = na.omit(wine.test))
wine.confint <- confint(submodel.fit)
wine.confint
predict(submodel.fit, wine.test, interval = "confidence")
#insert your code here and save your fit as `submodel.fit`
submodel.fit <- lm(formula = quality~ fixed.acidity + citric.acid + residual.sugar + density, data = na.omit(wine))
summary(submodel.fit)
# insert your code here and save your confidence intervals as `wine.confint`
wine.confint <- predict(submodel.fit, wine.test, interval = "confidence")
wine.confint[1, 2]
wine.confint[0, 2]
wine.confint[1, 3]
head(wine.confint)
wine.confint[1, 2]
# insert your code here and save your percentage as `pct.covered`
count <- 0
for (i in c(1, nrow(wine.test))){
if(wine.confint[i, 2] < wine.test$quality[i] & wine.confint[i, 3] > wine.test$quality[i]){
count <- count + 1
}
}
pct.covered <- count/nrow(wine.test)
pct.covered
# insert your code here and save your percentage calculated
# using the other confidence interval as `pct.covered.other`
wine.confint.other <- predict(submodel.fit, wine.test, interval = "prediction")
count_other <- 0
for(i in c(1, nrow(wine.test))){
if(wine.confint.other[i, 2] < wine.test$quality[i] & wine.confint.other[i, 3] > wine.test$quality[i]){
count_other <- count_other + 1
}
}
pct.covered.other <- count_other/nrow(wine.test)
pct.covered.other
# insert your code here and save your percentage as `pct.covered`
count <- 0
for (i in c(1, nrow(wine.test))){
if(wine.confint[i, 2] < wine.test$quality[i] & wine.confint[i, 3] > wine.test$quality[i]){
count <- count + 1
}
}
pct.covered <- count/nrow(wine.test)
pct.covered
# insert your code here and save your percentage calculated
# using the other confidence interval as `pct.covered.other`
wine.confint.other <- predict(submodel.fit, wine.test, interval = "prediction")
count_other <- 0
for(i in c(1, nrow(wine.test))){
if(wine.confint.other[i, 2] < wine.test$quality[i] & wine.confint.other[i, 3] > wine.test$quality[i]){
count_other <- count_other + 1
}
}
pct.covered.other <- count_other/nrow(wine.test)
pct.covered.other
# insert your code here and save your confidence intervals as `wine.confint`
wine.confint <- predict(submodel.fit, wine.test, interval = "confidence")
# insert your code here and save your percentage as `pct.covered`
count <- 0
for (i in c(1, nrow(wine.test))){
if(wine.confint[i, 2] < wine.test$quality[i] & wine.confint[i, 3] > wine.test$quality[i]){
count <- count + 1
}
}
pct.covered <- count/nrow(wine.test)
pct.covered
# insert your code here and save your percentage calculated
# using the other confidence interval as `pct.covered.other`
wine.confint.other <- predict(submodel.fit, wine.test, interval = "prediction")
count_other <- 0
for(i in c(1, nrow(wine.test))){
if(wine.confint.other[i, 2] < wine.test$quality[i] & wine.confint.other[i, 3] > wine.test$quality[i]){
count_other <- count_other + 1
}
}
pct.covered.other <- count_other/nrow(wine.test)
pct.covered.other
# insert your code here and save your percentage as `pct.covered`
count <- 0
for (i in c(1, nrow(wine.test))){
if(wine.confint[i, 2] < wine.test$quality[i] & wine.confint[i, 3] > wine.test$quality[i]){
count <- count + 1
}
}
pct.covered <- count/nrow(wine.test)*100
pct.covered
# insert your code here and save your percentage calculated
# using the other confidence interval as `pct.covered.other`
wine.confint.other <- predict(submodel.fit, wine.test, interval = "prediction")
count_other <- 0
for(i in c(1, nrow(wine.test))){
if(wine.confint.other[i, 2] < wine.test$quality[i] & wine.confint.other[i, 3] > wine.test$quality[i]){
count_other <- count_other + 1
}
}
pct.covered.other <- count_other/nrow(wine.test)*100
pct.covered.other
head(wine.confint)
head(wine.confint.other)
head(wine.test$quality)
count
count_other
wine.confint[1, 2] < wine.test$quality[1]
wine.confint[1, 3] > wine.test$quality[1]
wine.confint[1, 3] > wine.test$quality[1]
wine.confint[1, 2] < wine.test$quality[i] & wine.confint[1, 3] > wine.test$quality[i]
wine.confint[3, 2] < wine.test$quality[i] & wine.confint[3, 3] > wine.test$quality[i]
wine.confint[2, 2] < wine.test$quality[i] & wine.confint[2, 3] > wine.test$quality[i]
wine.confint[4, 2] < wine.test$quality[i] & wine.confint[4, 3] > wine.test$quality[i]
wine.confint[4, 2] < wine.test$quality[4] & wine.confint[4, 3] > wine.test$quality[4]
wine.confint[4, 2] < wine.test$quality[4] & wine.confint[4, 3] > wine.test$quality[4]
wine.confint[5, 2] < wine.test$quality[5] & wine.confint[5, 3] > wine.test$quality[5]
# insert your code here and save your percentage as `pct.covered`
count <- 0
for (i in c(1, nrow(wine.test))){
if(wine.confint[i, 2] < wine.test$quality[i] & wine.confint[i, 3] > wine.test$quality[i]){
count <- count + 1
}
}
pct.covered <- count/nrow(wine.test)*100
pct.covered
# insert your code here and save your percentage calculated
# using the other confidence interval as `pct.covered.other`
wine.confint.other <- predict(submodel.fit, wine.test, interval = "prediction")
count_other <- 0
for(i in c(1, nrow(wine.test))){
if(wine.confint.other[i, 2] < wine.test$quality[i] & wine.confint.other[i, 3] > wine.test$quality[i]){
count_other <- count_other + 1
}
}
pct.covered.other <- count_other/nrow(wine.test)*100
pct.covered.other
c(1, nrow(wine.test))
c(1:3)
# insert your code here and save your percentage as `pct.covered`
count <- 0
for (i in c(1 : nrow(wine.test))){
if(wine.confint[i, 2] < wine.test$quality[i] & wine.confint[i, 3] > wine.test$quality[i]){
count <- count + 1
}
}
pct.covered <- count/nrow(wine.test)*100
pct.covered
# insert your code here and save your percentage calculated
# using the other confidence interval as `pct.covered.other`
wine.confint.other <- predict(submodel.fit, wine.test, interval = "prediction")
count_other <- 0
for(i in c(1 : nrow(wine.test))){
if(wine.confint.other[i, 2] < wine.test$quality[i] & wine.confint.other[i, 3] > wine.test$quality[i]){
count_other <- count_other + 1
}
}
pct.covered.other <- count_other/nrow(wine.test)*100
pct.covered.other
# insert your code here and save your confidence intervals as `wine.confint`
wine.confint <- predict(submodel.fit, wine.test, interval = "prediction")
# insert your code here and save your percentage as `pct.covered`
count <- 0
for (i in c(1 : nrow(wine.test))){
if(wine.confint[i, 2] < wine.test$quality[i] & wine.confint[i, 3] > wine.test$quality[i]){
count <- count + 1
}
}
pct.covered <- count/nrow(wine.test)*100
pct.covered
# insert your code here and save your percentage calculated
# using the other confidence interval as `pct.covered.other`
wine.confint.other <- predict(submodel.fit, wine.test, interval = "confidence")
count_other <- 0
for(i in c(1 : nrow(wine.test))){
if(wine.confint.other[i, 2] < wine.test$quality[i] & wine.confint.other[i, 3] > wine.test$quality[i]){
count_other <- count_other + 1
}
}
pct.covered.other <- count_other/nrow(wine.test)*100
pct.covered.other
View(wine.fit)
View(wine.fit)
wine.test[[1]]
names(wine.test)
# insert your code here and save your updated model as `wine.backward`
wine.backward <- lm(quality ~fixed.acidity + volatile.acidity + citric.acid + residual.sugar +  chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol,data = na.omit(wine))
summary(wine.backward)
# insert your code here and save your model as `wine.backward`
wine.backward2 <- lm(quality ~fixed.acidity + volatile.acidity + citric.acid +  chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol,data = na.omit(wine))
summary(wine.backward2)
# insert your code here and save your model as `wine.backward`
wine.backward2 <- lm(quality ~fixed.acidity + volatile.acidity + citric.acid +  chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol,data = na.omit(wine))
summary(wine.backward2)
wine.backward3 <- lm(quality ~ volatile.acidity + citric.acid +  chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol,data = na.omit(wine))
summary(wine.backward3)
wine.backward4 <- lm(quality ~ volatile.acidity +  chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol,data = na.omit(wine))
summary(wine.backward4)
wine.backward5 <- lm(quality ~ volatile.acidity + citric.acid +  chlorides  + total.sulfur.dioxide + pH + sulphates + alcohol,data = na.omit(wine))
summary(wine.backward5)
wine.backward5 <- lm(quality ~ volatile.acidity +  chlorides  + total.sulfur.dioxide + pH + sulphates + alcohol,data = na.omit(wine))
summary(wine.backward5)
# insert your code here and save your model as `wine.backward`
wine.backward2 <- lm(quality ~fixed.acidity + volatile.acidity + citric.acid +  chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol,data = na.omit(wine))
#summary(wine.backward2)
wine.backward3 <- lm(quality ~ volatile.acidity + citric.acid +  chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol,data = na.omit(wine))
#summary(wine.backward3)
wine.backward4 <- lm(quality ~ volatile.acidity +  chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol,data = na.omit(wine))
#summary(wine.backward4)
wine.backward5 <- lm(quality ~ volatile.acidity +  chlorides  + total.sulfur.dioxide + pH + sulphates + alcohol,data = na.omit(wine))
print(summary(wine.backward5))
step(wine.fit, direction = "backward")
summary(wine.backward4)
names(wine.dataset)
?step
# Insert your code here
step(wine.fit, direction = "forward", scope)
# Insert your code here
step(wine.fit, direction = "forward", scope = 0)
# Insert your code here
step(wine.fit, direction = "forward", scope = 1)
# Insert your code here
step(wine.fit, direction = "forward", scope = list(lower = null, upper = full))
# Insert your code here
step(wine.fit, scope = list(lower = null, upper = full), direction = "forward")
# Insert your code here
step(wine.fit, scope = list(lower = NULL, upper = full), direction = "forward")
# Insert your code here
step(wine.fit, scope = list(lower = NULL, upper = "full"), direction = "forward")
# Insert your code here
step(wine.fit, scope = list(lower = NULL, upper = .), direction = "forward")
# Insert your code here
step(wine.fit, scope = (lower = NULL), direction = "forward")
# Insert your code here
empty.fit = lm(quality~1, data = wine.dataset)
step(wine.fit, direction = "forward", formula = scope(empty.fit))
# Insert your code here
empty.fit = lm(quality~1, data = wine.dataset)
step(empty.fit, direction = "forward", formula = scope(wine.fit))
# Insert your code here
empty.fit = lm(quality~1, data =  na.omit(wine))
step(empty.fit, direction = "forward", formula = scope(wine.fit))
# Insert your code here
empty.fit = lm(quality~1, data =  wine)
step(empty.fit, direction = "forward", formula = scope(wine.fit))
# Insert your code here
empty.fit = lm(quality~1, data =  wine)
step(empty.fit, direction = "forward", formula = scope(wine.fit))
knitr::opts_chunk$set(echo = TRUE, fig.path = "../images/")
count_char_per_tweet <- nchar(tweet_content)
text_emoticon <- read.csv("../data/text-emoticon.csv", header = T, sep = ",", stringsAsFactors = FALSE)
tweet_content <- text_emoticon[[4]]
count_char_per_tweet <- nchar(tweet_content)
summary(count_char_per_tweet)
histogram_tweets_chars <- hist(count_char_per_tweet, breaks = seq(from = 0, to = max(count_char_per_tweet)+5, by = 5), main = "Histogram of No. of characters in a tweet!")
test <- str_extract_all(text_emoticon$content, pattern = '@\\w{1, 15}+')
library(knitr)
library(stringr)
library(XML)
library(ggplot2)
library(readr)
test <- str_extract_all(text_emoticon$content, pattern = '@\\w{1, 15}+')
test <- str_extract_all(text_emoticon$content, pattern = '@\\w{1, 15}+')
test <- str_extract_all(text_emoticon$content, pattern = '@\\w{1, 15}+')
test <- str_extract_all(text_emoticon$content, pattern = '@\\w{1, 15}+')
install.packages("stringr")
install.packages("stringr")
knitr::opts_chunk$set(echo = TRUE, fig.path = "../images/")
library(knitr)
library(stringr)
library(XML)
library(ggplot2)
library(readr)
test <- str_extract_all(text_emoticon$content, pattern = '@\\w{1, 15}+')
test <- str_extract_all(text_emoticon$content, pattern = '@\\w{1, 15}+')
count_mentions <- c()
for (i in c(1:length(tweet_content))) {
x <- str_split(tweet_content[i], pattern = " ")
count_mentions[i] <- 0
for(j in c(1 : length(x[[1]]))){
if(str_sub(x[[1]][j], start = 1, end = 1)  =="@" & nchar(x[[1]][j]) <= 15){
if(str_detect(str_sub(x[[1]][j], start = 2, end = nchar(x[[1]][j])), pattern = "\\w")==TRUE){
count_mentions[i] <- count_mentions[i] + 1
}
}
}
}
freq_mentions <- table(count_mentions)
freq_mentions
count_mentions <- c()
for (i in c(1:length(tweet_content))) {
x <- str_split(tweet_content[i], pattern = " ")
count_mentions[i] <- 0
for(j in c(1 : length(x[[1]]))){
if(str_sub(x[[1]][j], start = 1, end = 1)  =="@" & nchar(x[[1]][j]) <= 15){
if(str_detect(str_sub(x[[1]][j], start = 2, end = nchar(x[[1]][j])), pattern = "\\w")==TRUE & str_detect(str_sub(x[[1]][j], start = 2, end = nchar(x[[1]][j])), pattern = "[:punct:]")== FALSE){
count_mentions[i] <- count_mentions[i] + 1
}
}
}
}
freq_mentions <- table(count_mentions)
freq_mentions
tweet_content[which(count_mentions==10)]
count_mentions <- c()
for (i in c(1:length(tweet_content))) {
x <- str_split(tweet_content[i], pattern = " ")
count_mentions[i] <- 0
for(j in c(1 : length(x[[1]]))){
if(str_sub(x[[1]][j], start = 1, end = 1)  =="@" & nchar(x[[1]][j]) <= 15){
if(str_detect(str_sub(x[[1]][j], start = 2, end = nchar(x[[1]][j])), pattern = "\\w")==TRUE){
count_mentions[i] <- count_mentions[i] + 1
}
}
}
}
freq_mentions <- table(count_mentions)
freq_mentions
count_mentions <- c()
for (i in c(1:length(tweet_content))) {
x <- str_split(tweet_content[i], pattern = " ")
count_mentions[i] <- 0
for(j in c(1 : length(x[[1]]))){
if(str_sub(x[[1]][j], start = 1, end = 1)  =="@" & nchar(x[[1]][j]) <= 15){
if(str_detect(str_sub(x[[1]][j], start = 2, end = nchar(x[[1]][j])), pattern = "\\w{1-15}")==TRUE){
count_mentions[i] <- count_mentions[i] + 1
}
}
}
}
count_mentions <- c()
for (i in c(1:length(tweet_content))) {
x <- str_split(tweet_content[i], pattern = " ")
count_mentions[i] <- 0
for(j in c(1 : length(x[[1]]))){
if(str_sub(x[[1]][j], start = 1, end = 1)  =="@" & nchar(x[[1]][j]) <= 15){
if(str_detect(str_sub(x[[1]][j], start = 2, end = nchar(x[[1]][j])), pattern = "\\w{1,15}")==TRUE){
count_mentions[i] <- count_mentions[i] + 1
}
}
}
}
freq_mentions <- table(count_mentions)
freq_mentions
freq_mentions <- table(count_mentions)
freq_mentions
count_mentions <- c()
for (i in c(1:length(tweet_content))) {
x <- str_split(tweet_content[i], pattern = " ")
count_mentions[i] <- 0
for(j in c(1 : length(x[[1]]))){
if(str_sub(x[[1]][j], start = 1, end = 1)  =="@" & nchar(x[[1]][j]) <= 15){
if(str_detect(str_sub(x[[1]][j], start = 2, end = nchar(x[[1]][j])), pattern = "\\w{1,15}+")==TRUE){
count_mentions[i] <- count_mentions[i] + 1
}
}
}
}
freq_mentions <- table(count_mentions)
freq_mentions
barplot(freq_mentions, main = "Barplot of the no. of mention's frequency", ylab = "Frequency", xlab = "No of mentions in a tweet")
tweet_content[which(count_mentions==10)]
count_hashtags <- c()
for(i in c(1:length(tweet_content))){
x <- str_split(tweet_content[i], pattern = " ")
count_hashtags[i] <- 0
for(j in c(1 : length(x[[1]]))){
if((str_sub(x[[1]][j], start = 1, end = 1)=="#" & str_detect(str_sub(x[[1]][j], start = 2, end = 2), pattern = "[0-9]")== FALSE & str_detect(str_sub(x[[1]][j], start = 2, end = nchar(x[[1]][j])), pattern = "[:punct:]")== FALSE)) {
if(nchar(x[[1]][j])>1){
if(str_detect(str_sub(x[[1]][j], start = 2, end = nchar(x[[1]][j])), pattern = (str_flatten(replicate((nchar(x[[1]][j])-1), "\\d"), collapse = "")))==FALSE){
count_hashtags[i] <- count_hashtags[i] + 1
}
}
}
}
}
#Average length of the hashtags
hashtag_len <- nchar(unlist(str_extract_all(tweet_content, '#[a-zA-Z][a-zA-Z0-9]*')))-1
#Average length of the hashtags
hashtag_len <- nchar(unlist(str_extract_all(tweet_content, '#[a-zA-Z][a-zA-Z0-9]*')))-1
avg_len <- mean(hashtag_len)
avg_len
#Most common length of the hashtags
#mode function
#' @description calculates the mode of a vector
#' @param v is a vector of the values
#' @return the mode of the values in the vector v
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(hashtag_len)
#Most common length of the hashtags
#mode function
#' @description calculates the mode of a vector
#' @param v is a vector of the values
#' @return the mode of the values in the vector v
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(hashtag_len)
#Most common length of the hashtags
hashtag_mode <- table(hashtag_len)
hashtag_mode
sort(hashtag_mode, decreasing = T)[1:2]
knitr::opts_chunk$set(echo = TRUE, fig.path = "../images/")
source("../code/regex-functions.R")
split_chars("Go Bears!")
source("../code/regex-functions.R")
split_chars("Go Bears!")
install.packages("stringr")
library(knitr)
library(stringr)
library(XML)
library(ggplot2)
library(readr)
source("../code/regex-functions.R")
split_chars("Go Bears!")
source("../code/regex-functions.R")
split_chars("Go Bears!")
split_chars("Expecto Partunam")
num_vowels("Go Bears!")
count_vowels("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")
reverse_chars("gattaca")
reverse_chars("Lumox Maxima")
reverse_words("sentence! this reverse")
reverse_words("string")
url <- https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/text-emotion.csv
url <- "https://raw.githubusercontent.com/ucb-stat133/stat133-spring-2018/master/data/text-emotion.csv"
download.file(url, "../../../")
download.file(url, "../../..")
download.file(url, "../../../Lab")
download.file(url, "../../../Lab/text-emoticon.csv")
download.file(url, "../data/text-emoticon.csv")
download.file(url <- url, destfile = "../data")
text_emoticon <- read.csv("../data/text-emoticon.csv", header = T, sep = ",", stringsAsFactors = FALSE)
text_emoticon <- read.csv("../data/text-emoticon.csv", header = T, sep = ",", stringsAsFactors = FALSE)
text_emoticon <- read.csv("../data/text-emoticon.csv", header = T, sep = ",", stringsAsFactors = FALSE)
download.file(url <- url, destfile = "../data/text-emoticon.csv")
download.file(url <- url, destfile = "../data/")
download.file(url <- url, destfile = "../data")
text_emoticon <- read.csv("../data/text-emoticon.csv", header = T, sep = ",", stringsAsFactors = FALSE)
download.file(url <- url, destfile = "../data")
download.file(url <- url, destfile = "../data")
setwd("C:/Users/Aummul/Desktop/133/hw-stat133-Aummul/hw04/report")
download.file(url <- url, destfile = "../data")
download.file(url <- url, destfile = "../../../..")
download.file(url <- url, destfile = "../../../../..")
download.file(url <- url, destfile = "../../../../../..")

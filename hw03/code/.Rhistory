else{
fact <- 1
for(i in 1:x){
fact <- fact * i
}
}
}
#Testing bin_factorial()
bin_factorial(5)
bin_factorial(0)
#Function bin_factorial()
#' @title bin_factorial
#' @description calculates the factorial of a non negative number
#' @param x number whose factorial has to be calculated
#' @return the factorial of the number
bin_factorial <- function(x){
if(x = 0){
return(1)
}
else{
fact <- 1
for(i in 1:x){
fact <- fact * i
}
}
}
#Testing bin_factorial()
bin_factorial(5)
bin_factorial(0)
bin_factorial <- function(x){
if(x = 0){
return(1)
}
else{
fact <- 1
for(i in 1:x){
fact <- fact * i
}
}
}
bin_factorial <- function(x){
if(x = 0){
return(1)
}
else{
fact <- 1
for(i in 1:x){
fact <- fact * i
}
}
}
bin_factorial <- function(x){
if(x = 0){
return(1)
}
else{
fact <- 1
for(i in 1:x){
fact <- fact * i
}
}
}
bin_factorial <- function(x){
if(x = 0){
return(1)
}
else{
fact <- 1
for(i in 1:x){
fact <- fact * i
}
return(fact)
}
}
bin_factorial <- function(x){
if(x = 0){
return(1)
}
else{
fact <- 1
for(i in 1:x){
fact <- fact * i
}
return(fact)
}
}
bin_factorial <- function(x){
if(x == 0){
return(1)
}
else{
fact <- 1
for(i in 1:x){
fact <- fact * i
}
return(fact)
}
}
#Testing bin_factorial()
bin_factorial(5)
bin_factorial(0)
#Function bin_combinations()
#' @title bin_combinations
#' @description calculates the number of combinations of a choosing some number from some another
#' @param n number from which the selection would take place
#' @param k the number of items to be chosen from n
#' @return the number of combinations
bin_combinations <- function(n = 1, k = 1){
return(bin_factorial(n)/(bin_factorial(k)*bin_factorial(n-k)))
}
#Testing bin_combinations()
bin_combinations(n = 5, k = 2)
bin_combinations(10, 3)
bin_combinations(4, 4)
bin_probability <- function(trials = 1, success = 1, prob = 1){
if(is_nonnegative(trials) & is_nonneg_integer(success) == TRUE){
}
else{
stop("Invalid number of trials or success. Trials and success need to be non negative integer")
}
}
bin_probability(trials = -1, 2, 0.2)
#Function bin_probability()
#' @title bin_probability
#' @description calculates the probability of k success amongst n trials
#' @param trials number of trials
#' @param success the number of success
#' @param prob probability of success
#' @return the binary probability calculaed
bin_probability <- function(trials = 1, success = 1, prob = 1){
if(is_nonnegative(trials) & is_nonneg_integer(success) == TRUE){
if(is_probability(prob)== TRUE){
}
else{
stop("Invalid probability")
}
}
else{
stop("Invalid number of trials or success. Trials and success need to be non negative integer")
}
}
bin_probability(10, 4, 2)
bin_probability <- function(trials = 1, success = 1, prob = 1){
if(is_nonnegative(trials) & is_nonneg_integer(success) == TRUE){
if(is_probability(prob)== TRUE){
return((prob^trials)*((1-prob)^(trials - success))
}
else{
stop("Invalid probability")
}
}
else{
stop("Invalid number of trials or success. Trials and success need to be non negative integer")
}
}
bin_probability <- function(trials = 1, success = 1, prob = 1){
if(is_nonnegative(trials) & is_nonneg_integer(success) == TRUE){
if(is_probability(prob)== TRUE){
return((prob^trials)*((1-prob)^(trials - success)))
}
else{
stop("Invalid probability")
}
}
else{
stop("Invalid number of trials or success. Trials and success need to be non negative integer")
}
}
#Testing bin_combinations()
bin_probability(trials = 5, success = 2, prob = 0.5)
bin_probability <- function(trials = 1, success = 1, prob = 1){
if(is_nonnegative(trials) & is_nonneg_integer(success) == TRUE){
if(is_probability(prob)== TRUE){
return((prob^success)*((1-prob)^(trials - success)))
}
else{
stop("Invalid probability")
}
}
else{
stop("Invalid number of trials or success. Trials and success need to be non negative integer")
}
}
#Testing bin_combinations()
bin_probability(trials = 5, success = 2, prob = 0.5)
bin_distribution <- function(trials = 1, prob = 1){
success <- c()
probability <- c()
for(i in 0:trials){
success[i+1] <- i
probability[i + 1] <- bin_probability(trials = trials, success = success[i + 1], prob = prob)
}
return(cbind.data.frame(success, probability))
}
#Function bin_distribution()
#' @title bin_distribution
#' @description makes a dataframe with the probability distribution of all the possible successes.
#' @param trials number of trials that take place for an experiment
#' @param prob probability of success in each trial
#' @return a data frame giving the probability distribution of the number of success
bin_distribution <- function(trials = 1, prob = 1){
success <- c()
probability <- c()
for(i in 0:trials){
success[i+1] <- i
probability[i + 1] <- bin_probability(trials = trials, success = success[i + 1], prob = prob)
}
return(cbind.data.frame(success, probability))
}
#Testing bin_distribution()
bin_distribution(trials = 5,prob = 0.5)
#Function bin_distribution()
#' @title bin_distribution
#' @description makes a dataframe with the probability distribution of all the possible successes.
#' @param trials number of trials that take place for an experiment
#' @param prob probability of success in each trial
#' @return a data frame giving the probability distribution of the number of success
bin_distribution <- function(trials = 1, prob = 1){
success <- c()
probability <- c()
for(i in 0:trials){
success[i+1] <- i
probability[i+1] <- bin_probability(trials = trials, success = success[i+1], prob = prob)
print(probability[i +1])
}
return(cbind.data.frame(success, probability))
}
#Testing bin_distribution()
bin_distribution(trials = 5,prob = 0.5)
#Testing bin_distribution()
bin_distribution(trials = 5,prob = 0.5)
bin_distribution <- function(trials = 1, prob = 1){
success <- c()
probability <- c()
for(i in 0:trials){
success[i+1] <- i
probability[i+1] <- bin_probability(trials = trials, success = i, prob = prob)
print(probability[i +1])
}
return(cbind.data.frame(success, probability))
}
#Testing bin_distribution()
bin_distribution(trials = 5,prob = 0.5)
#' @title bin_distribution
#' @description makes a dataframe with the probability distribution of all the possible successes.
#' @param trials number of trials that take place for an experiment
#' @param prob probability of success in each trial
#' @return a data frame giving the probability distribution of the number of success
bin_distribution <- function(trials = 1, prob = 1){
success <- c()
probability <- c()
for(i in 0:trials){
success[i+1] <- i
probability[i+1] <- bin_probability(trials = trials, success = i, prob = prob)
}
return(cbind.data.frame(success, probability))
}
#Testing bin_distribution()
bin_distribution(trials = 5,prob = 0.5)
#Testing bin_distribution()
bin_distribution(trials = 5,prob = 0.2)
unction bin_distribution()
#' @title bin_distribution
#' @description makes a dataframe with the probability distribution of all the possible successes.
#' @param trials number of trials that take place for an experiment
#' @param prob probability of success in each trial
#' @return a data frame giving the probability distribution of the number of success
bin_distribution <- function(trials = 1, prob = 1){
success <- c()
probability <- c()
for(i in 0:trials){
success[i+1] <- i
probability[i+1] <- bin_probability(trials = trials, success = i, prob = prob)
}
return(cbind.data.frame(success, probability))
}
#Testing bin_distribution()
bin_distribution(trials = 5, prob = 0.5)
#Testing bin_distribution()
bin_distribution(trials = 5, prob = 0.2)
#Testing bin_combinations()
bin_probability(trials = 5, success = 2, prob = 0.5)
#Testing bin_combinations()
bin_probability(trials = 5, success = 2, prob = 0.5)
bin_distribution <- function(trials = 1, prob = 1){
success <- c()
probability <- c()
for(i in 0:trials){
success[i+1] <- i
probability[i+1] <- bin_combinations(n = trials, k = i)*bin_probability(trials = trials, success = i, prob = prob)
}
return(cbind.data.frame(success, probability))
}
#Testing bin_distribution()
bin_distribution(trials = 5, prob = 0.2)
bin_distribution <- function(trials = 1, prob = 1){
success <- c()
probability <- c()
for(i in 0:trials){
success[i+1] <- i
probability[i+1] <- (bin_combinations(n = trials, k = i)*bin_probability(trials = trials, success = i, prob = prob))
}
return(cbind.data.frame(success, probability))
}
#Testing bin_distribution()
bin_distribution(trials = 5, prob = 0.2)
#Function bin_distribution()
#' @title bin_distribution
#' @description makes a dataframe with the probability distribution of all the possible successes.
#' @param trials number of trials that take place for an experiment
#' @param prob probability of success in each trial
#' @return a data frame giving the probability distribution of the number of success
bin_distribution <- function(trials = 1, prob = 1){
success <- c()
probability <- c()
for(i in 0:trials){
success[i+1] <- i
probability[i+1] <- (bin_combinations(n = trials, k = i)*bin_probability(trials = trials, success = i, prob = prob))
}
return(cbind.data.frame(success, probability))
}
#Testing bin_distribution()
bin_distribution(trials = 5, prob = 0.5)
#Function bin_combinations()
#' @title bin_combinations
#' @description calculates the number of combinations of a choosing some number from some another
#' @param n number from which the selection would take place
#' @param k the number of items to be chosen from n
#' @return the number of combinations
bin_combinations <- function(n = 1, k = 1){
return(bin_factorial(n)/(bin_factorial(k)*bin_factorial(n-k)))
}
#Testing bin_combinations()
bin_combinations(n = 5, k = 2)
bin_combinations(10, 3)
bin_combinations(4, 4)
bin_probability <- function(trials = 1, success = 1, prob = 1){
if(is_nonnegative(trials) & is_nonneg_integer(success) == TRUE){
if(is_probability(prob)== TRUE){
return((prob^success)*((1-prob)^(trials - success)))
}
else{
stop("Invalid probability")
}
}
else{
stop("Invalid number of trials or success. Trials and success need to be non negative integer")
}
}
#Testing bin_probability()
bin_probability(trials = 5, success = 2, prob = 0.5)
bin_probability <- function(trials = 1, success = 1, prob = 1){
if(is_nonnegative(trials) & is_nonneg_integer(success) == TRUE){
if(is_probability(prob)== TRUE){
return((prob^success)*((1-prob)^(trials - success))*bin_combinations(n = trials, k = success))
}
else{
stop("Invalid probability")
}
}
else{
stop("Invalid number of trials or success. Trials and success need to be non negative integer")
}
}
#Testing bin_probability()
bin_probability(trials = 5, success = 2, prob = 0.5)
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = "images/")
```{r}
source("code/binomial-functions.R", local = F)
bin_probability(trials = 10, success = 3, prob = (1/6))
source("code/binomial-functions.R", local = F)
bin_probability(trials = 10, success = 3, prob = (1/6))
source("code/binomial-functions.R", local = F)
bin_probability(trials = 10, success = 3, prob = (1/6))
source("code/binomial-functions.R", local = F)
bin_probability(trials = 10, success = 3, prob = (1/6))
source("code/binomial-functions.R", local = F)
bin_probability(trials = 10, success = 3, prob = (1/6))
dist_six <- bin_distribution(trials = 10, prob = 0.25)
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials")
dist_six <- bin_distribution(trials = 10, prob = 0.25)
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials")
source("code/binomial-functions.R", local = F)
bin_probability(trials = 10, success = 3, prob = (1/6))
dist_six <- bin_distribution(trials = 10, prob = 0.25)
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials")
#Getting more than 3 heads in 5 tosses, p = 0.35
prob_more_than_three <- 0
for (i in 4:5) {
prob_more_than_three <- prob_more_than_three + bin_probability(trials = 5, success = i, prob = 0.35)
}
prob_more_than_three
dist_heads <- bin_distribution(trials = 15, prob = 0.35)
plot(dist_heads, xlab = "number of heads in 15 trials", ylab = "probability", main = "Distribution of probability of no of heads in 15 trials")
dist_heads
dist_six
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials")
plot(dist_six)
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials", xlim = c(0, 0.30))
dist_six <- bin_distribution(trials = 10, prob = 0.25)
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials", ylim = c(0, 0.30))
View(https://github.com/stat133-sp18/hw-stat133-Aummul/tree/master/hw03)
View(plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials", ylim = c(0, 0.30))
)
dist_six <- bin_distribution(trials = 10, prob = 0.25)
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials", ylim = c(0, 0.50))
dist_six <- bin_distribution(trials = 10, prob = 0.25)
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials", ylim = c(0, 0.50))
dist_six <- bin_distribution(trials = 10, prob = 0.25)
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials", ylim = c(0, 1))
dist_six <- bin_distribution(trials = 10, prob = 0.25)
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials", ylim = c(0, 1.5))
dist_six <- bin_distribution(trials = 10, prob = 0.25)
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials"))
dist_six <- bin_distribution(trials = 10, prob = 0.25)
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials")
dist_six
iving the probability distribution of the number of success
bin_distribution <- function(trials = 1, prob = 1){
success <- c()
probability <- c()
for(i in 0:trials){
success[i+1] <- i
probability[i+1] <- (bin_combinations(n = trials, k = i)*bin_probability(trials = trials, success = i, prob = prob))
}
return(cbind.data.frame(success, probability))
}
#Testing bin_distribution()
bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials = 1, prob = 1){
success <- c()
probability <- c()
for(i in 0:trials){
success[i+1] <- i
probability[i+1] <- bin_probability(trials = trials, success = i, prob = prob)
}
return(cbind.data.frame(success, probability))
}
#Testing bin_distribution()
bin_distribution(trials = 5, prob = 0.5)
source("code/binomial-functions.R", local = F)
bin_probability(trials = 10, success = 3, prob = (1/6))
source("code/binomial-functions.R", local = F)
bin_probability(trials = 10, success = 3, prob = (1/6))
source('C:/Users/Aummul/Desktop/133/hw-stat133-Aummul/hw03/code/binomial-functions.R')
source('C:/Users/Aummul/Desktop/133/hw-stat133-Aummul/hw03/code/binomial-functions.R')
source("code/binomial-functions.R", local = F)
bin_probability(trials = 10, success = 3, prob = (1/6))
dist_six <- bin_distribution(trials = 10, prob = 0.25)
dist_six
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials")
#Getting more than 3 heads in 5 tosses, p = 0.35
prob_more_than_three <- 0
for (i in 4:5) {
prob_more_than_three <- prob_more_than_three + bin_probability(trials = 5, success = i, prob = 0.35)
}
prob_more_than_three
source('C:/Users/Aummul/Desktop/133/hw-stat133-Aummul/hw03/code/binomial-functions.R')
source('C:/Users/Aummul/Desktop/133/hw-stat133-Aummul/hw03/code/binomial-functions.R')
source('C:/Users/Aummul/Desktop/133/hw-stat133-Aummul/hw03/code/binomial-functions.R')
source("code/binomial-functions.R", local = F)
bin_probability(trials = 10, success = 3, prob = (1/6))
dist_six <- bin_distribution(trials = 10, prob = 0.25)
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials")
#Getting more than 3 heads in 5 tosses, p = 0.35
prob_more_than_three <- 0
for (i in 4:5) {
prob_more_than_three <- prob_more_than_three + bin_probability(trials = 5, success = i, prob = 0.35)
}
prob_more_than_three
dist_heads <- bin_distribution(trials = 15, prob = 0.35)
dist_heads
plot(dist_heads, xlab = "number of heads in 15 trials", ylab = "probability", main = "Distribution of probability of no of heads in 15 trials")
dist_heads <- bin_distribution(trials = 15, prob = 0.35)
dist_heads
plot(dist_heads, xlab = "number of heads in 15 trials", ylab = "probability", main = "Distribution of probability of no of heads in 15 trials")
dist_heads <- bin_distribution(trials = 15, prob = 0.35)
dist_heads
plot(dist_heads, xlab = "number of heads in 15 trials", ylab = "probability", main = "Distribution of probability of no of heads in 15 trials")
dist_six <- bin_distribution(trials = 10, prob = 0.25)
dist_six
plot(dist_six, xlab = "number of sixes in 10 trials", ylab = "probability", main = "Distribution of probability of no of six in 10 trials")
#Getting more than 3 heads in 5 tosses, p = 0.35
prob_more_than_three <- 0
for (i in 4:5) {
prob_more_than_three <- prob_more_than_three + bin_probability(trials = 5, success = i, prob = 0.35)
}
prob_more_than_three
#Getting more than 3 heads in 5 tosses, p = 0.35
prob_more_than_three <- 0
for (i in 4:5) {
prob_more_than_three <- prob_more_than_three + bin_probability(trials = 5, success = i, prob = 0.35)
}
prob_more_than_three
#Getting more than 3 heads in 5 tosses, p = 0.35
prob_more_than_three <- 0
for (i in 4:5) {
prob_more_than_three <- prob_more_than_three + bin_probability(trials = 5, success = i, prob = 0.35)
}
prob_more_than_three
#Getting more than 3 heads in 5 tosses, p = 0.35
prob_more_than_three <- 0
for (i in 4:5) {
prob_more_than_three <- prob_more_than_three + bin_probability(trials = 5, success = i, prob = 0.35)
}
prob_more_than_three
#Getting more than 3 heads in 5 tosses, p = 0.35
prob_more_than_three <- 0
for (i in 4:5) {
prob_more_than_three <- prob_more_than_three + bin_probability(trials = 5, success = i, prob = 0.35)
}
prob_more_than_three
